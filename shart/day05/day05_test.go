package day05_test

import (
	"testing"
	// "fmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
	. "github.com/sean-hart/advent2019/shart/day05"
)

var day05Input = []int{3,225,1,225,6,6,1100,1,238,225,104,0,1002,148,28,224,1001,224,-672,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1102,8,21,225,1102,13,10,225,1102,21,10,225,1102,6,14,225,1102,94,17,225,1,40,173,224,1001,224,-90,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,2,35,44,224,101,-80,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,26,94,224,101,-120,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1001,52,70,224,101,-87,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,16,92,225,1101,59,24,225,102,83,48,224,101,-1162,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,80,10,225,101,5,143,224,1001,224,-21,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1102,94,67,224,101,-6298,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,102,2,223,223,1005,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,359,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,389,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,419,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,449,1001,223,1,223,8,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,479,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,494,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,554,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,569,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,614,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226}

func TestDay05(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Day 05")
}

// func BenchmarkDay5(b *testing.B) {
// 	for i := 0; i < b.N; i++ {
// 		RunProgram(1, day05Input, 0, 0)
// 	}
// }

var _ = Describe("Day 05 pt 1 - Output tests", func() {
	Context("Reading Output", func() {
		DescribeTable("Output",
			func(inputInt int, memory []int, expectedOutput int) {
				output, _, _ := RunProgram(inputInt, memory, 0, 0)
				Expect(output).To(Equal(expectedOutput))
			},
			Entry("parameter mode 000 Opcode 3 and 4", 0, []int{3, 0, 4, 0, 99}, 0),
			Entry("parameter mode 000 with nonzero input Opcode 3 and 4", 1, []int{3, 0, 4, 0, 99}, 1),
			Entry("parametermode 010", 0, []int{1002, 4, 3, 4, 33}, 0),
			Entry("parameter mode 011", 0, []int{1101, 100, -1, 4, 0}, 0),
			Entry("Challenge Input (AC)", 1, day05Input, 7566643),
			// 126947211572531 is too high
			Entry("Challenge Input (radiators)", 5, day05Input, 2000),
			Entry("Example 1 with input 1", 6, []int{3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9}, 1),
			Entry("Example 1 with input 0", 0, []int{3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9}, 0),
			Entry("Example 2", 0, []int{3,9,8,9,10,9,4,9,99,-1,8},0),
			Entry("Example 3", 1, []int{3,3,1105,-1,9,1101,0,0,12,4,12,99,1}, 1),
			Entry("Example 4", 1, []int{3,3,1108,-1,8,3,4,3,99}, 0),
			Entry("Example 5", 0, []int{3,3,1107,-1,8,3,4,3,99}, 1),
			Entry("Big Example with input < 8", 0, []int{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}, 999),
			Entry("Big Example with input 8", 8, []int{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}, 1000),
			Entry("Big Example with input > 8", 9, []int{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}, 1001),
		)
	})

	Context("Reading Memory", func() {
		DescribeTable("Memory",
			func(inputInt int, memory []int, expectedOutput []int) {
				_, memoryOut, _ := RunProgram(inputInt, memory, 0, 0)
				// fmt.Println(memory)
				Expect(memoryOut).To(Equal(expectedOutput))
			},
			Entry("parameter mode 000", 0, []int{3, 0, 4, 0, 99}, []int{0, 0, 4, 0, 99}), //good
			Entry("parameter mode 000 with nonzero input", 1, []int{3, 0, 4, 0, 99}, []int{1, 0, 4, 0, 99}), //good
			Entry("parameter mode 010", 0, []int{1002, 4, 3, 4, 33}, []int{1002, 4, 3, 4, 99}),
			Entry("parameter mode 010", 0, []int{1004, 2, 99}, []int{1004, 2, 99}),
			Entry("parameter mode 011", 0, []int{1101, 100, -1, 4, 0}, []int{1101, 100, -1, 4, 99}),
		)
	})
})
